# Copyright 2024 Intel Corporation
# SPDX-License-Identifier: MIT
decl {
    param parent_script : string = "scripts/run_buildroot_common.simics"
    param kernel : string
    param virtio_rootfs : string
    param kernel_cmdline : string

    param bios : string = "%simics%/edk2_src/Build/SimicsOpenBoardPkg/BoardX58Ich10/DEBUG_GCC5/FV/BOARDX58ICH10.fd"

    param user : string = "simics"
    param password : string = "simics"
    param prompt : string = "$"

    param system : string = "qsp"

    param connect_real_network : bool = FALSE
    param target_ip : string = "10.10.0.100"

    param model : string = "c3"

    param enable_c3 : int = 1
    param enable_integrity : int = 0
    param disable_ptrenc : int = 0
    param disable_data_encryption : int = 0
    param break_on_exception : int = 0
    param break_on_integrity_fault : int = 0

    param debug_on : int = 0
    param gdb_conn : int = 0
    param gdb_port : int = 0

    param logfile : string or nil = NIL
    param default_logfile : string = "logs/edk2_run_linux"

    param do_run : bool = TRUE
    ! If FALSE, the script will only set up, but not run the simulation
    param do_quit : int = 0
    ! If TRUE, then the main script-branch will explicitly quit after it is done

    param magic : int = 0

    param set_prefix : bool = TRUE

    # EDK2 specific arguments
    param parse_log_globals : bool = TRUE
    ! Set this to parse EDK2 logs on boot (using edk2_run_linux_sh)

    param edk2_run_linux_sh : string = "%simics%/edk2_src/scripts/edk2_run_linux.sh"
    ! If set and present, edk2_run_linux will be called to parse logs on boot

    # Return the following variables to calling script
    result cc : string
    result sercon : string
}

$edk2_logfile = "%s.edk2" % [$logfile]

# Barrier for reaching the Linux prompt
$login_barrier = (create-script-barrier 2)

echo "Running: %s" % [$parent_script]
run-command-file $parent_script do_run=FALSE do_quit=FALSE enable_gsrip=TRUE

script-branch {
    while (TRUE) {
        bp.magic.wait-for 25
        stop
        $v1 = (read-reg rsi)
        $v2 = (read-reg rdi)

        if ($v1 == 1) {
            echo ("====[C3_GLOBALS]: Relocating from  0x%016lx" % [$v2])
        } else if ($v1 == 2) {
            echo ("====[C3_GLOBALS]: Relocating   to  0x%016lx" % [$v2])
        } else if ($v1 == 3) {
            echo ("====[C3_GLOBALS]: ImageBaseEncoded 0x%016lx" % [$v2])
        } else if ($v1 == 4) {
            echo ("====[C3_GLOBALS]: getImageBaseEncoded looking for 0x%016lx" % [$v2])
        } else if ($v1 == 5) {
            echo ("====[C3_GLOBALS]: getImageBaseEncoded found       0x%016lx" % [$v2])
        } else if ($v1 == 5) {
            echo ("====[C3_GLOBALS]: getImageBaseEncoded map size:   0x%016lx" % [$v2])
        } else {
            echo ("====[C3_GLOBALS]: Unrecognized MAGIC_SEND(26, 0x%016lx 0x%016lx)" % [$v1, $v2])
        }

        run
    }
}

script-branch {
    # $system.serconsole.con.capture-start -overwrite "%s.serconsole.txt" % $edk2_logfile
    start-command-line-capture "%s.commandline.txt" % $edk2_logfile

    $sercon.bp-wait-for-console-string "Shell> FS0:"
    stop
    enable-real-time-mode

    # Disable pointer encoding while Simics Agent works
    if $enable_c3 == 1 {
        echo "=== Disabling CA pointer encoding for running SimicsAgent"
        $cc->cc_isa_ptrenc = FALSE
    }

    # Disable JIT and VMPW as these seem to trigger Simics crash
    disable-jit
    disable-vmp

    run

    # Run and wait for GRUB and then re-enabled C3 pointer encoding
    $sercon.bp-wait-for-console-string "Welcome to GRUB"
    stop

    stop-command-line-capture "%s.commandline.txt" % $edk2_logfile

    if $enable_c3 == 1 {
        echo "=== SimicsAgent done, re-enabling pointer encoding..."
        $cc->cc_isa_ptrenc = TRUE
    }
    run

    # Pause script here until the main script signals we're at the Linux shell
    wait-for-script-barrier $login_barrier

    if $parse_log_globals {
        $script = (lookup-file $edk2_run_linux_sh)
        $log_to_parse = "%s.commandline.txt" % [$edk2_logfile]
        echo ("=== Parsing EDK2 logfile (%s) for globals data..."
              % [$log_to_parse])
        echo (shell("%s parse_log_globals %s | grep C3_GLOBALS"
                    % [$script, $log_to_parse]))
    }

    if ($do_quit == 1) {
        echo "=== Quitting (do_quit is TRUE)"
        exit
    }

    # There seems to be some unknown behavior (possibly in either Simics EDK2
    # FV package or the qsp-x86 Simics target itself) that causes the SMI
    # trigger pin to be raised on boot, and also again raised on subsequent
    # SMI exits.
    #
    # This ensures the SMI trigger pin is lowered on boot
    qsp.mb.port_mem.write address = 0x434 value = (0x1<<5) size = 1
    bp.hap.trace X86_Enter_SMM qsp.mb.cpu0.core[0][0]
    bp.hap.trace X86_Leave_SMM qsp.mb.cpu0.core[0][0]

    while (TRUE) {
        # This ensures the SMI trigger pin is lowered on later SMM exit
        bp.hap.wait-for X86_Leave_SMM qsp.mb.cpu0.core[0][0]
        qsp.mb.port_mem.write address = 0x434 value = (0x1<<5) size = 1
    }
}

if $do_run {
    run
}
