# Common LIM run script

@def check_mandatory_vars(vars):
	for v in vars.split():
		if not v in simenv:
			print("Error: variable " + v + " not defined. Exiting.")
			run_command("exit")

run-python-file scripts/init.py

@cmd_to_shell("hostname")

if not defined exit { $exit = 0 }







@check_mandatory_vars("workload_name")

if defined llvm_lib_files {
	@check_mandatory_vars("llvm_lib_src llvm_lib_dst")
}

$glibc_dir = "/home/simics/glibc/glibc-2.30_install/lib"
if not defined guest_lib64_dir { $guest_lib64_dir = "/usr/lib64" }

if not defined checkpoint { $checkpoint = "checkpoints/cc_glibc.ckpt"}
echo "Using checkpoint: " + $checkpoint
if not defined system { $system = "board" }
if not defined nobuild { $nobuild = FALSE }
if not defined compiler { $compiler = "g++"}
if not defined gcc_flags { $gcc_flags = ""}
if not defined ld_flags { $ld_flags = "" }
if defined wrap { $gcc_flags = "-Wall -Wl,--wrap,malloc -Wl,--wrap,calloc -Wl,--wrap,realloc -Wl,--wrap,free " + $gcc_flags}
if not defined wrap_flags { $wrap_flags = "" }
if not defined run_args { $run_args = "" }
if not defined model { $model = "cc" }

$cc_model_type = FALSE
if $model == "cc" or $model == "c3" {
	$cc_model_type = TRUE
}




if $cc_model_type {
    @append_env_var("CC_ENABLED=1")


} else if $model == "lim" {
	# If data_disp is already defined, that means the environment variables were already set
	# by some other script that includes this one. It is important to not overwrite those
	# settings, since the model variable gets set to lim in the lim_disp branch, which would
	# result in incorrect environment variable settings here.
	if not defined data_disp {
        @append_env_var("LIM_ENABLED=1")
		if defined lim_no_meta {
			@append_env_var("LIM_NO_META=1")
		}
		if defined trace_only { $env_vars = $env_vars + " TRACE_ONLY=1"}
	}
} else if $model == "lim_disp" {
    @append_env_var("LIM_ENABLED=1 LIM_DATA_DISP=1")
	if defined trace_only { $env_vars = $env_vars + " TRACE_ONLY=1" }
	$model = "lim" # The handling after this point is identical once the environment variables are set.
	$data_disp = 1
} else if $model == "native" {
	if not defined env_vars { $env_vars = "" }


} else {
    echo "ERROR: need to specify valid model. Exiting"
    exit 1
}




if defined glibc_debug {
	@append_env_var("CC_DEBUG_PRINT=1")
}
read-configuration $checkpoint
$system.console.con.hide
if $system == "tgl" {
    tgl.i82571EBv2.mac[1].bank.log-level 0
    tgl.mb.sb.pmc.log-level 0
}
$con = $system.serconsole.con
$cpu = $system.mb.cpu0.core[0][0]

$start_time=0
$start_cycle=0
$end_time=0

if not defined unwinder { $unwinder="default_unwinder" }

if defined log {
    !mkdir -p logs
        if $unwinder == "default_unwinder" {
            if defined experiment {
                $logfile = "logs/" + $workload_name + "." + $experiment + "_" + $model + "_" + (date format=file)
            } else {
                $logfile = "logs/" + $workload_name + "_" + $model + "_" + (date format=file)
            }
        } else {
            if defined experiment {
                $logfile = "logs/" + $workload_name + "." + $experiment + "_" + $model + "_" + $unwinder + "_" + (date format=file)
            } else {
                $logfile = "logs/" + $workload_name + "_" + $model + "_" + $unwinder + "_" + (date format=file)
            }
        }
	start-command-line-capture $logfile
	list-variables
}

$branch_id = (script-branch "workload" {
	# Send in a newline to trigger a prompt
	$con.input "cd\n"
    #$con.wait-then-write "$ " "echo Starting simulation now! \n"
    #add-session-comment "command echo issued"
	# run for one/tenth second to give the hardware time to update
	bp.time.wait-for $cpu 0.1

	###############################
	#     Upload Source files     #
	###############################
    echo "Transferring source files to target... This will take a few seconds..."
    echo "  Calling start-agent-manager"
    start-agent-manager
    echo "  Calling agent_manager.connect-to-agent"
	agent_manager.connect-to-agent
	if defined llvm_lib_files {
		echo "  Copying LLVM lib files %s" % [$llvm_lib_files]
		@copy_many_files(simenv.llvm_lib_files, simenv.llvm_lib_src, simenv.llvm_lib_dst)
	}
	if defined src_file {
		local $src_full_path = (lookup-file "%simics%/"+ $src_path + "/" + $src_file)
		echo "  Copying src file %s to /home/simics" % [$src_full_path]
		matic0.upload $src_full_path "/home/simics/"
	}
	if defined include_file {
		if $include_file != "" {
			echo "  Copying inluce file: '%s'" % [$include_file]
			@copy_many_files(simenv.include_file, simenv.src_path)
		}
	}
	if defined include_folders {
		@copy_include_folders(simenv.include_folders)
	}
	@copy_include_folders("malloc")

	if $cc_model_type {
		echo "  Copying malloc files"
		matic0.upload (lookup-file "%simics%/malloc/cc_malloc.c") "/home/simics/"
		matic0.upload (lookup-file "%simics%/malloc/cc_globals.h") "/home/simics/"
		matic0.upload (lookup-file "%simics%/malloc/utils.h") "/home/simics/"
		matic0.wait-for-job
	} else if $model == "lim" {
		matic0.upload (lookup-file "%simics%/malloc/lim_ptr_encoding.h") "/home/simics/"
		matic0.wait-for-job
	}
	# matic0.upload (lookup-file "%simics%/glibc/glibc-2.30_install/libc-2.30.so") "/home/simics/glibc/glibc-2.30_install/lib/"

	if defined upload_glibc {
		echo "  Copying libc-2.30.so libpthread-2.30.so libdl-2.30.so"
		$glibc_lib_host = "%simics%/glibc/glibc-2.30_install/lib"
		$glibc_lib_target = "/home/simics/glibc/glibc-2.30_install/lib"
		matic0.upload (lookup-file $glibc_lib_host + "/libc-2.30.so") $glibc_lib_target + "/"
		matic0.upload (lookup-file $glibc_lib_host + "/libpthread-2.30.so") $glibc_lib_target + "/"
		matic0.upload (lookup-file $glibc_lib_host + "/libdl-2.30.so") $glibc_lib_target + "/"
		matic0.wait-for-job
	}

    echo "  Setting read-permissions on home directory"
	@command_to_console("sudo chown -R simics:simics *")
    echo "Done transferring source files to target"
    @command_to_console("echo 0 | sudo tee /proc/sys/kernel/randomize_va_space")
	disable-real-time-mode
	#################################

	###############################
	#     Compile & run           #
	###############################
	if not defined obj_files {
		$obj_files = $src_file
	} else {
		echo "Overriding obj_files with: " + $obj_files
	}
	if not defined build_cmd { $build_cmd = $compiler + " " + $gcc_flags + " " + "-o " + $workload_name + " " + $obj_files + " " + $ld_flags }
	if not defined bin_path { $bin_path = "/home/simics"}
	if not defined run_cmd { $run_cmd = "./" + $workload_name + " " + $run_args }
	echo "Build command: " + $build_cmd

	$may_build = FALSE
	if $cc_model_type or $model == "lim" or $model == "native" {
		$may_build = TRUE
	}



	if $may_build {
		if not defined wrap {
			#glibc wrap
			if not $nobuild {
				@command_to_console(simenv.build_cmd)
			}
			if defined download_bin_path {
				enable-real-time-mode
				matic0.download -overwrite from=($bin_path + "/" + $workload_name) to=$download_bin_path
				matic0.download -overwrite from=("/home/simics/glibc/glibc-2.30_install/lib/libc-2.30.so") to=$download_bin_path
				matic0.wait-for-job
				disable-real-time-mode
				#@setup_debug()
			}
			@command_to_console("cp " + simenv.workload_name + " " + simenv.workload_name + "_orig")
			if $unwinder == "default_unwinder" {
				@command_to_console("patchelf --set-interpreter /home/simics/glibc/glibc-2.30_install/lib/ld-2.30.so --set-rpath /home/simics/glibc/glibc-2.30_install/lib " + simenv.workload_name)
			} else {
				@command_to_console("patchelf --set-interpreter " + simenv.glibc_dir + "/ld-2.30.so " + simenv.workload_name)
				@command_to_console("patchelf --set-rpath " + simenv.glibc_dir + ":/home/simics/llvm/llvm_install/lib " + simenv.workload_name)
				@command_to_console("patchelf --add-needed libunwind.so.1 " + simenv.workload_name)
			}
			#@command_to_console("patchelf --add-needed libm.so.6 " + simenv.workload_name)
			@command_to_console("ln -nsf " + simenv.guest_lib64_dir + "/libgtest.a " + simenv.glibc_dir)
			@command_to_console("ln -nsf " + simenv.guest_lib64_dir + "/libgomp.so.1 " + simenv.glibc_dir)
			@command_to_console("mkdir -p /home/simics/glibc/glibc-2.30_install/share/zoneinfo")
			@command_to_console("ln -nsf /usr/share/zoneinfo/UTC /home/simics/glibc/glibc-2.30_install/share/zoneinfo/UTC")
			if $env_vars != "" {
				$run_cmd = "%s %s" % [$env_vars, $run_cmd]
			}
		}
	}

	if defined pre_run_fixup {
		@command_to_console(simenv.pre_run_fixup)
	}
	echo "Running model: " + $model
	if $model == "native" {
		if defined cache {
			run-command-file scripts/setup-lim-caches.simics
			$model_inst = lim_0
		}
	} else if $cc_model_type {
		if $model != "c3"  {
			if defined disable_encryption {
				echo "Disabling data encryption"
				$model_inst = (new-cc-model -connect-all -disable-data-encryption)
			} else {
				$model_inst = (new-cc-model -connect-all)
			}
		} else {
			if defined disable_encryption {
				echo "Disabling data encryption"
				$model_inst = (new-c3-model -connect-all -disable-data-encryption)
			} else {
				$model_inst = (new-c3-model -connect-all)
			}
		}
		$model_inst += "_0"


	} else if $model == "lim" {
		if defined cache {
			run-command-file scripts/setup-lim-caches.simics
			$model_inst = lim_0
		} else {
			if defined trace_only {
				$model_inst = (new-lim-model -connect-all -trace-only name = lim)
			} else {
				$model_inst = (new-lim-model -connect-all name = lim)
			}
			$model_inst += "_0"
		}
	}




	if  defined debug {
		$model_inst->debug_on=TRUE
	}
	if defined disable_meta_check {
		if $model == "lim" {
			$model_inst->disable-meta-check=TRUE
		}
	}
	if defined break_on_exception {
		if $model == "lim" {
			$model_inst->break_on_exception=TRUE
		}
	}

	if defined break_on_decode_fault {
		$model_inst->break_on_decode_fault=TRUE
	}

	if defined data_disp {
		if $model == "lim" {
			$model_inst->data_disp=TRUE
		}
	}

	if $system != "tgl" {
        #$system.software.enable-tracker
    }
	if defined magic { enable-magic-breakpoint }
	echo "Run command: " + $run_cmd
	echo "Start time: " + (date)
	echo "Simulation timestamp before workload:  "
	$start_time = (date -t)
	$start_cycle = (ptime -c)
	if defined mem_profiler {
		$mem_profiler = (new-memory-profiler -connect-all -read-logical -write-logical -execute-logical)
		$pattern ="name='" + $workload_name + "'"
		#$pf = (new-process-filter software-component = $system.software pattern = $pattern)
		#$mem_profiler.add-filter filter = $pf
	}
	if defined instr_hist {
		$ihn = (new-instruction-histogram -connect-all view = x86-normalized)
		$pattern ="name='" + $workload_name + "'"
		$pf = (new-process-filter software-component = board.software pattern = $pattern)
		$ihn.add-filter filter = $pf
		echo "Instruction profiler enabled name=" + $ihn
		$con.input "\n"
		local $prompt = "$ "
		$con.wait-then-write $prompt ($run_cmd + "\n")
		$con.wait-for-string $prompt
		stop
		$ihn.histogram
	}

	ptime
    if defined lit {
        $trace_count = 1
        $con.input $run_cmd + "\n"
        stop
        echo "Skipping first " + $initial_skip_length + " instructions"
        cc $initial_skip_length
        echo "Done skipping"
    } else {
        if defined run_cycles {
            $con.input $run_cmd + "\n"
            stop
            # cc 1000000000 #1min
            $part_cycles = $run_cycles * 10000000
            echo "Running for " + $run_cycles + " billion cycles.."
            foreach $i in (range 100){
                $percent = $i*1
                echo $percent + "%"
                cc $part_cycles
            }
        } else {
            @command_to_console(simenv.run_cmd)
        }
        $end_time = (date -t)

        #Post run commands:
        if defined post_run_cmd {
            @command_to_console(simenv.post_run_cmd)
        }

        if defined cache {
            if defined cache_stat_file { start-command-line-capture -overwrite filename=$cache_stat_file }
            lim_0.dl1.statistics
            lim_0.il1.statistics
            lim_0.l2.statistics
            lim_0.l3.statistics
            lim_0->print_stats
            if defined cache_stat_file { stop-command-line-capture }
        }
        echo "Done running " + $workload_name + "!"
        stop
        if $exit != 0 {
            exit
        }
    }
})

#run-python-file example.py
enable-real-time-mode

if defined custom_start_workload {
    echo "Executing custom start_workload routine."
	@start_workload()
} else {
    run
}

#wait for the branch to complete
if defined lit {
    while $trace_count <= $num_traces {
        ######################
        # Capture LCAT + LIT #
        ######################
        echo "Starting trace (" + $trace_count + ")"
        ptime
        $name = $base_name+"_lcatlit_"+$trace_count
        lit-capture-trace $name lcat_length= $lcat_length lit_length=$lit_length
        echo "Skipping " + $skip_length + " cycles"
        if $trace_count < $num_traces { cc $skip_length }
        $trace_count = $trace_count+1
    }
	$end_time = (date -t)
    $model_inst->print_stats
    echo "Tracing done!"
}
echo  "Simulation timestamp after workload:   "
ptime
echo "End time: " +(date)
$simulation_time= $end_time - $start_time
echo "Simulation time: " + $simulation_time + "s"
$end_cycle=(ptime -c)
$simulation_cycles = $end_cycle - $start_cycle
echo "Simulation cycles: " + $simulation_cycles
