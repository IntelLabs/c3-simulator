# Copyright 2024 Intel Corporation
# SPDX-License-Identifier: MIT
decl {
    param kernel : string
    param virtio_rootfs : string
    param kernel_cmdline : string

    param bios : string = ""

    param user : string = "root"
    param password : string = "root"
    param prompt : string = "#"

    param system : string = "qsp"

    param connect_real_network : bool = FALSE
    param target_ip : string = "10.10.0.100"

    param model : string = "c3"

    param enable_c3 : int = 0
    param enable_gsrip : bool = FALSE
    param disable_ptrenc : int = 0
    param disable_data_encryption : int = 0
    param break_on_exception : int = 0
    param enable_integrity : int = 0
    param integrity_break_on_read_mismatch : string = ""
    ! Set to 1 or 0 to explicitly set
    param integrity_break_on_write_mismatch : string = ""
    ! Set to 1 or 0 to explicitly set
    param integrity_fault_on_read_mismatch : string = ""
    ! Set to 1 or 0 to explicitly set
    param integrity_fault_on_write_mismatch : string = ""
    ! Set to 1 or 0 to explicitly set
    param integrity_warn_on_read_mismatch : string = ""
    ! Set to 1 or 0 to explicitly set

    param debug_on : int = 0
    param gdb_conn : int = 0
    param gdb_port : int = 9124

    param logfile : string or nil = NIL
    param default_logfile : string = "logs/run_buildroot_common"

    param do_run : bool = TRUE
    ! If FALSE, the script will only set up, but not run the simulation
    param do_quit : bool = FALSE
    ! If TRUE, then the main script-branch will explicitly quit after it is done

    param magic : int = 0

    param fcmd : string or nil = NIL
    ! If set, fcmd is forwarded and executed in the Linux shell on boot

    param set_prefix : bool = TRUE

    param login_barrier : int or nil = NIL

    # Return the following variables to calling script
    result cc : string
    result sercon : string
    result logfile : string
}

if $set_prefix { output-radix 16 }

run-python-file scripts/run_buildroot_common.py

@load_user_provided_linux()

$cpu        = $system.mb.cpu0.core[0][0]
$graphcon   = $system.console.con
$sercon     = $system.serconsole.con

if $logfile == NIL {
    $logfile = ("%s.%s.%s.%s.%s" %
                [$default_logfile,
                 ".ptrenc" + $disable_ptrenc,
                 ".int." + $enable_integrity,
                 ".data_enc" + $disable_data_encryption+,
                 "." + (date format=file)
               ])
}

# Loads the C3 model and sets $cc, then configures:
#   disable_ptrenc
#   disable_data_encryption
#   break_on_exception
#   enable_gsrip
#   enable_integrity
#   integrity_break_on_read_mismatch
#   integrity_break_on_write_mismatch
#   integrity_fault_on_read_mismatch
#   integrity_fault_on_write_mismatch
#   integrity_warn_on_read_mismatch
@enable_c3()

if (debug_on == 1) {
    $cc->debug = TRUE
}

if $magic != 0 {
    bp.magic.break $magic
}

#$sercon.bp-break-console-string "Starting network"
script-branch {
    $sercon.bp-wait-for-console-string "Welcome to GRUB!"
    stop

    disable-jit
    disable-vmp

    $system.serconsole.con.capture-start -overwrite "%s.grub.serconsole.txt" % $logfile
    start-command-line-capture -overwrite "%s.grub.commandline.txt" % $logfile

    if $gdb_conn == 1 {
        $sercon.bp-wait-for-console-string "Externally Configured Linux"
        new-gdb-remote port=$gdb_port
    }

    enable-real-time-mode
    run

    $sercon.bp-wait-for-console-string "buildroot login: "
    $sercon.input "%s\n" % [$user]

    $sercon.bp-wait-for-console-string "Password:"
    $sercon.input "%s\n" % [$password]

    echo ("=== Logged in as %s:%s, waiting for prompt (%s)" %
          [$user, $password, $prompt])
    $sercon.bp-wait-for-console-string ("%s " % [$prompt])

    echo "=== Login successful"

    stop
    if $connect_real_network {
        echo "=== Connecting to real network"
        connect-real-network target-ip = $target_ip
    }

    run
    bp.time.wait-for $cpu 5

    if $fcmd != NIL {
        $sercon.input "%s\n" % [$fcmd]
        $sercon.bp-wait-for-console-string ("%s " % [$prompt])
    }

    stop

    if $login_barrier != NIL {
        # Signal the caller script that we've reached the Linux shell
        wait-for-script-barrier $login_barrier
    }

    if $do_quit {
        echo "=== Quitting (do_quit is TRUE)"
        exit
    }
}

if $do_run == TRUE {
    run
}
