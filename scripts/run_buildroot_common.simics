# Copyright 2024 Intel Corporation
# SPDX-License-Identifier: MIT
decl {
    param kernel : string
    param virtio_rootfs : string
    param kernel_cmdline : string

    param user : string = "root"
    param password : string = "root"
    param prompt : string = "#"

    param system : string = "qsp"

    param connect_real_network : int = 0
    param target_ip : string = "10.10.0.100"

    param model : string = "c3"

    param enable_c3 : int = 0
    param enable_integrity : int = 0
    param disable_ptrenc : int = 0
    param disable_data_encryption : int = 0
    param debug_on : int = 0
    param gdb_conn : int = 0
    param gdb_port : int = 9124
    param pov : int = 0

    param logfile : string = "harden/logs/tim2_cred_hijack.lin"
    param simlogfile : string = "harden/logs/tim2_cred_hijack.sim"

    param do_quit : int = 0
    param magic : int = 0
}

if connect_real_network == 1 {
    (load-target qsp-x86/user-provided-linux
        machine:software:linux:kernel=$kernel
        machine:software:linux:virtio_rootfs=$virtio_rootfs
        machine:software:linux:cmdline=$kernel_cmdline
        network:service_node:connect_real_network=napt
        machine:hardware:consoles:gfx_con:show=0)
} else {
    (load-target qsp-x86/user-provided-linux
        machine:software:linux:kernel=$kernel
        machine:software:linux:virtio_rootfs=$virtio_rootfs
        machine:software:linux:cmdline=$kernel_cmdline
        machine:hardware:consoles:gfx_con:show=0)
}

$cpu        = $system.mb.cpu0.core[0][0]
$graphcon   = $system.console.con
$sercon     = $system.serconsole.con

$logfile=$logfile + ".ptrenc"+$disable_ptrenc
$logfile=$logfile + ".int."+$enable_integrity
$logfile=$logfile+ ".data_enc"+$disable_data_encryption+"."+(date format=file)

$simlogfile=$simlogfile + ".ptrenc"+$disable_ptrenc
$simlogfile=$simlogfile + ".int."+$enable_integrity
$simlogfile=$simlogfile+ ".data_enc"+$disable_data_encryption+"."+(date format=file)

#$sercon.bp-break-console-string "Starting network"
script-branch {
    $sercon.bp-wait-for-console-string "Welcome to GRUB!"
    stop

    disable-jit
    disable-vmp

    #connect qsp.mb.sb.eth_slot ethernet_switch.device1
    if $enable_c3 == 1 {
        if $model == "cc" {
            $cc = (new-cc-model -connect-all)
        } else if $model == "c3" {
            $cc = (new-c3-model -connect-all)
        } else {
            echo "Unknown model '%s'" % [$model]
        }
        if $enable_integrity == 1 {
            $cc->enable_integrity = TRUE
            $cc->integrity_break_on_write_mismatch = TRUE
            $cc->integrity_fault_on_write_mismatch = FALSE
            $cc->integrity_break_on_read_mismatch = FALSE
        }

        if $disable_ptrenc == 1 {
            echo "----------------------------------------"
            echo "| !!! CC pointer encoding disabled !!! |"
            echo "----------------------------------------"
            $cc->cc_isa_ptrenc = FALSE
        }

        if $disable_data_encryption == 1 {
            echo "---------------------------------------"
            echo "| !!! CC data encryption disabled !!! |"
            echo "---------------------------------------"
            $cc->disable_data_encryption = TRUE
        }

        if $debug_on == 1 {
            $cc->debug_on = TRUE
        }
    }

    $system.serconsole.con.capture-start -overwrite "%s.serconsole.txt" % $logfile
    start-command-line-capture $simlogfile

    run

    if $gdb_conn == 1 {
        $sercon.bp-wait-for-console-string "Externally Configured Linux"
        stop

        if $disable_ptrenc == 1 {
            new-gdb-remote port=$gdb_port
        } else {
            new-gdb-remote port=$gdb_port
        }
    }

    $sercon.bp-wait-for-console-string "buildroot login: "
    $sercon.input "%s\n" % [$user]

    $sercon.bp-wait-for-console-string "Password:"
    $sercon.input "%s\n" % [$password]

    $sercon.bp-wait-for-console-string ("%s " % [$prompt])

    echo "Logged in as %s:%s" % [$user, $password]

    if $enable_integrity == 1 {
        $cc->integrity_break_on_read_mismatch = TRUE
    }

    enable-real-time-mode

    stop
    if ($connect_real_network) {
        connect-real-network target-ip = $target_ip
    }
    run
    bp.time.wait-for $cpu 5

    stop

    if ($do_quit == 1) {
        exit
    }
}
